#include "leptjson.h"
#include <assert.h>  /* assert() */
#include <stdlib.h>  /* NULL, strtod() */
#include <stdbool.h>

#define EXPECT(c, ch)       do { assert(*c->json == (ch)); c->json++; } while(0)
#define ISDIGIT(ch)         ((ch) >= '0' && (ch) <= '9')
#define ISDIGIT1TO9(ch)     ((ch) >= '1' && (ch) <= '9')

typedef struct {
	const char* json;
}lept_context;

static void lept_parse_whitespace(lept_context* c) {
	const char *p = c->json;
	while (*p == ' ' || *p == '\t' || *p == '\n' || *p == '\r')
		p++;
	c->json = p;
}

static int lept_parse_literal(lept_context* c, lept_value* v, const char *pattern, lept_type success_type) {
	EXPECT(c, *pattern);
	pattern++;
	int index = 0;
	while (pattern[index] != '\0' && pattern[index] == c->json[index])
		index++;
	if (pattern[index] != '\0')return LEPT_PARSE_INVALID_VALUE;
	c->json += index;
	v->type = success_type;
	return LEPT_PARSE_OK;
}

#if 0
static int lept_parse_true(lept_context* c, lept_value* v) {
	EXPECT(c, 't');
	if (c->json[0] != 'r' || c->json[1] != 'u' || c->json[2] != 'e')
		return LEPT_PARSE_INVALID_VALUE;
	c->json += 3;
	v->type = LEPT_TRUE;
	return LEPT_PARSE_OK;
}

static int lept_parse_false(lept_context* c, lept_value* v) {
	EXPECT(c, 'f');
	if (c->json[0] != 'a' || c->json[1] != 'l' || c->json[2] != 's' || c->json[3] != 'e')
		return LEPT_PARSE_INVALID_VALUE;
	c->json += 4;
	v->type = LEPT_FALSE;
	return LEPT_PARSE_OK;
}

static int lept_parse_null(lept_context* c, lept_value* v) {
	EXPECT(c, 'n');
	if (c->json[0] != 'u' || c->json[1] != 'l' || c->json[2] != 'l')
		return LEPT_PARSE_INVALID_VALUE;
	c->json += 3;
	v->type = LEPT_NULL;
	return LEPT_PARSE_OK;
}
#endif


static bool validate_number(lept_context* c)
{
	const char *ch = c->json;
	int state = 0;
	while (true)
	{
		switch (state)
		{
			case 0:
			{
				if (*ch == '0')
				{
					state = 2;
					ch++;
				}
				else if (*ch == '-')
				{
					state = 1;
					ch++;
				}
				else if (ISDIGIT1TO9(*ch))
				{
					state = 3;
					ch++;
				}
				else state = 9;
				break;
			}
			case 1:
			{

				if (*ch == '0')
				{
					state = 2;
					ch++;
				}
				else if (ISDIGIT1TO9(*ch))
				{
					state = 3;
					ch++;
				}
				else state = 9;
				break;
			}
			case 2:
			{
				if (*ch == '.')
				{
					state = 4;
					ch++;
				}
				else return true;
				break;
			}
			case 3:
			{
				if (ISDIGIT(*ch))
					ch++;
				else if (*ch == '.')
				{
					state = 4;
					ch++;
				}
				else return true;
				break;
			}
			case 4:
			{
				if (ISDIGIT(*ch))
				{
					state = 5;
					ch++;
				}
				else state = 9;
				break;
			}
			case 5:
			{
				if (ISDIGIT(*ch))
					ch++;
				else if (*ch == 'e' || *ch == 'E')
				{
					state = 6;
					ch++;
				}
				else return true;
				break;
			}
			case 6:
			{
				if (ISDIGIT(*ch))
				{
					state = 8;
					ch++;
				}
				else if (*ch == '+' || *ch == '-')
				{
					state = 7;
					ch++;
				}
				else state = 9;
				break;
			}
			case 7:
			{
				if (ISDIGIT(*ch))
				{
					state = 8;
					ch++;
				}
				else state = 9;
				break;
			}
			case 8:
			{

				break;
			}
			default:
			{
				return false;
			}
		}
	}
	return false;
}


static int lept_parse_number(lept_context* c, lept_value* v) {
	char* end;
	if (!validate_number(c))return LEPT_PARSE_INVALID_VALUE;
	v->n = strtod(c->json, &end);
	if (c->json == end)
		return LEPT_PARSE_INVALID_VALUE;
	c->json = end;
	v->type = LEPT_NUMBER;
	return LEPT_PARSE_OK;
}

static int lept_parse_value(lept_context* c, lept_value* v) {
	switch (*c->json) {
	case 't':  return lept_parse_literal(c, v, "true", LEPT_TRUE);
	case 'f':  return lept_parse_literal(c, v, "false", LEPT_FALSE);
	case 'n':  return lept_parse_literal(c, v, "null", LEPT_NULL);
	default:   return lept_parse_number(c, v);
	case '\0': return LEPT_PARSE_EXPECT_VALUE;
	}
}

int lept_parse(lept_value* v, const char* json) {
	lept_context c;
	int ret;
	assert(v != NULL);
	c.json = json;
	v->type = LEPT_NULL;
	lept_parse_whitespace(&c);
	if ((ret = lept_parse_value(&c, v)) == LEPT_PARSE_OK) {
		lept_parse_whitespace(&c);
		if (*c.json != '\0') {
			v->type = LEPT_NULL;
			ret = LEPT_PARSE_ROOT_NOT_SINGULAR;
		}
	}
	return ret;
}

lept_type lept_get_type(const lept_value* v) {
	assert(v != NULL);
	return v->type;
}

double lept_get_number(const lept_value* v) {
	assert(v != NULL && v->type == LEPT_NUMBER);
	return v->n;
}
